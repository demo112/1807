day04回顾
  字符串的格式化表达式
    字符串 % (参数1,参数2,..)
  返回字符串
  　　占位符 %   类型码
       %        s
       %        d
       %        f
       %        x
                ....
循环语句:
  while 语句
  for语句

嵌套
  while ...:
      if ...:
           ....
      while ...:
          if ....:
              while....:


　　while 真值表达式:
       语句块1
  else:
       语句块2

break语句
　　终止当前循环




for语句：
    作用：
        用来遍历可迭代对象的数据元素
    可迭代对象：
        可迭代对象是指能依次获取数据元素的对象
        可迭代对象包括：
            字符串　ｓｔｒ
            列表　ｌｉｓｔ
            元组　　tuple
        数字不是可迭代对象

    语法：
        for 变量列表　in 可迭代对象：
            语句块１
        else:
            语句块２
    示例见：
        for.py
    练习：
        任意输入一段字符串
        计算出输入字符a的个数，并打印出字符
        计算出空格的个数，并打印出个数
    说明：
        else语句只有在可迭代对象无法提供数据的时候才会执行，可省略，在内部使用ｂｒｅａｋ语句的时候不会执行
    示例：
        for_else.py
    for语句变量可能不被创建的问题：
        for x in range(4, 0):
            print(x)
    for语句的嵌套：
        for x in "ABC":
            for x in "123":
                print(x + y)
        循环嵌套是乘法关系
    注意问题：
        for_range_time.py
range语句：
    语法：
        1.range(stop)
        用来生成０～stop之间的整数，不包含stop
        2.range(start, stop[,step])
        用来生成start～stop之间的整数，不包含stop
        每次生成整数后移动ｓｔｅｐ
        格式详见：help(range)
    作用：
        用来创建一个生成一系列整数的可迭代对象（也叫整数序列生成器）
    说明：
        range返回的对象可以由for语句来进行一依次迭代访问取出其中的整数
    示意：
        range(4)         # 0,1,2,3,
        range(3,6)       # 3, 4, 5
        range(1, 10, 2)  # 1, 3, 5, 7, 9
        range(5, 0, -2)  # 5, 3, 1
        range(4, 0)      # 空
        range.py
continue语句：
    作用：
        用于循环语句（while for ）中，　不再执行本次循环continue之后的语句，重新开始一次新的循环
    语法：
        continue
    说明：
        １．在while语句中执行continue，jianghuizhijietiaozhuandaowhile语句的真值表达式处重新判断循环条件
        ２．在for语句中执行，将会从可迭代对象中取下一个元素．
    while中使用continue:
        # x = 0
        # while x < 5:
        #     if x == 2:
        #       x += 1
        #       continue
        #     print(x)
循环小结：
    四条语句：
        while
        for
        break
        continue
    可迭代对象：
    str字符串
    range（）函数返回的对象


列表list
    问题：
        如何将计算机临时保存在一个地方，同时又方便添加删除和修改等操作

    列表的定义：
        列表是一种容器
        列表是可以改变的序列
        列表是由一系列特定元素组成的，元素与元素之间可能没有任何的关联关系，单他们之间有先后顺序关系．

    python3中的五种序列类型：
        字符串str
        列表 list
        元组　tuple
        字节串　bytes
        字节数组　bytearray
    创建空列表的字面值表达式：
        [] #创建一个空列表
        L = []  变量L绑定一个新创建的空列表
    创建非空的列表的字面值：
        L = [1, 2, 3, 4] #l 绑定一个新建且包含四个元素的列表
        L = ['beijing', 'shanghai', 'shenzhen']
        L = [1, two, '四',3.14]
        L = [1, 2, [3.1, 3.2], 4]
    列表的构造函数：
        语法：
        list()  生成一个空列表
        list(iterable)  用可迭代对象创建一个列表
        示例：
            L = list()
            L = list("hello")
            L = list(range(5))
    列表的运算：
        算数运算：
            + += * +=(运算规则同字符串)
            + 用于拼接列表　生成新的列表
            x = [1, 2, 3]
            y = [4, 5, 6]
            z = x + y       [1, 2, 3, 4, 5, 6]

+= 用原列表与右侧可迭代对象追加来修改原列表
  语法:
     列表变量 += 可迭代对象
  示例:
    x = [1, 2, 3]
    y = [4, 5, 6]
    x += y  # x = [1, 2, 3, 4, 5, 6]
    x += "ABC" # x = [1,2,3,4,5,6,'A','B','C']
    x = [1, 2, 3]
    字符串是可改变列表对象，不会创建新列表
    字符串是不可改变的对象，创建新对象
    x += range(4, 6)  # x = [1, 2, 3, 4, 5]
    # += 是改变原来的列表对象,并不会创建新的列表
    x = [1, 2, 3]
    print(id(x))
    x += [4, 5, 6]
    print(id(x))

* 生成重复的列表
  x = [1, 2] * 3  # x = [1,2,1,2,1,2]

*= 生成重复的列表,并改变对变量的绑定
  x = [1, 2, 3]
  x *= 4  # x = [1,2,3,1,2,3,1,2,3,1,2,3]

列表的比较运算:
  运算符:
    < <= > >= == !=
       比较规则与字符串的比较规则相同

  示例:
    [1,2,3] < [1, 2, 4]  # True
    [1, 2, 3] < [3, 2, 1]  # True
    [1, 2, 3] == [3, 2, 1]  # False
    [2, 3] >= [1, 2, 3]  # True

    [1, "2"] > ['2', 1]  # 报错
    ["ABC", 1, 2, 3] < ["123", 3, 2]  #

列表是可迭代对象
  L = [1, 3, 5, 7]
  for x in L:
     print(x)   # 1 3 5 7

练习:
  1. 输入三行文字，将这三行文字保存于列表L中，并打印
    如:
      请输入: abc<回车>
      请输入: 1234<回车>
      请输入: 你好<回车>
    生成如下列表L = ['abc', '1234', '你好']
    print(L)  # ['abc', '1234', '你好']

  2. 输入任意行文字，存于列表中L中，当不输入内容直接回车后结束输入:
     1) 打印L列表中的内容
     2) 打印出您刚才输入了几行文字信息
     3) 打印出您刚才输入了多少个字符数据
            s = []
            a = str(input("请输入："))
            b = str(input("请输入："))
            c = str(input("请输入："))
            s = [a] + [b] + [c]
            s = [a, b, c]
            print(s)

            输入任意行文字，存在列表中，挡不输入内容后回车结束输入
            打印L
            打印刚才输入了几行
            打印输入了多少字符
练习：
    写一个程序，任意输入一个数，判断这个数是否是素数

    输入一个正整数（打印如下一颗圣诞树）如４
    　　　*　
    　　***
    　*****
    *******
    　　　*
   　　　 *
    　　　*
     　 *
     算出１００～999之间的水仙花书

练习：
　　1. 写一个程序，任意输入一个数，判断这个数是否是素数(prime)
    素数（也叫质数),是只能被１和自身整除的正整数
     如: 2 3 5 7 11 13 17 19 ....
    提示:
      用排除法: 当判断x是否为素数时，只要让x分别除以2, 3, 4, 5 ... x-1，只要能整数则x不是素数,否则x是素数
  2. 输入一个正整数(代表树干的高度)
  　　　打印如下一棵圣诞树
     如:
       输入: 2
     打印:
       *
      ***
       *
       *
     如:
       输入: 3
     打印:
        *
       ***
      *****
        *
        *
        *

  3. 算出100~999之间的水仙花数(Narcissistic Number)
    水仙花数是指百位的3次方 + 十位的3次方 + 个位的3次方等于原数的整数

    例如:
       153 = 1**3 + 5**3 + 3 ** 3
    答案:
      153  370 ...

















