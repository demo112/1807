day02回顾:
  运算符:
    算术运算符:
      + - * / // % **
    复合赋值算术运算符
      += -= *= .....
    is , is not

    < <= > >= == != 
    not  and  or
    +(正号)  -(负号)
  函数:
    id(x)
    abs
    round
    pow
    float(x)
    complex
    int
    bool
    input
    print

运算符  数字  表达式  语句 

if 语句
  if 真值表达式1:
      语句块1
  elif 真值表达式2:
      语句块2
  elif 真值表达式3:
      ....
  ...
  else:
     ....
pass 语句

布尔运算:
  not
  and

  or
     '' or '0'  # input('xxx:') or '0'


day03笔记

字符串 str (string)
  作用:
    用来记录文字信息
  表示方法:
    在非注释中凡是用引号括起来的部分都是字符串
    '    单引号
    "    双引号
    '''  三单引号
    """  三双引号

空字符串的字面值的表示方式
  ''
  ""
  ''''''
  """"""
  注:空字符串的布尔测试值bool(x)为 False

非空字符串的字面值
  'hello'
  "hello"
  '''hello'''
  """hello"""

单引号和双引号的区别:
  单引号内的双引号不算结束符
  双引号内的单引号不算结束符

  示例:
    print("I'm a teacher")
    print('I am "weimingze"')

三引号字符串
  以'''或"""开头,以'''或"""结尾的字符串
  作用:
    三引号字符串中的换行会自动转换为换行符'\n'
    三引号内可以包含单引号和双引号
  示例:
    # 要表示如下的文字内容:
    welcome to beijing.
    I like python!
    I am studing.
    s = 'welcome to beijing.\nI like python!\nI am studing.'

    s2 = '''welcome to beijing.
    I like python!
    I am studing.'''



隐式字符串字面值的拼接
   "I'm Teacher."   'I am "weimingze"'
   得到的字符串等同于
   '''I'm Teacher.I am "weimingze"'''


用转义序列代表特殊字符
  字符串字面值中用字符反斜杠 \ 后跟一些字符代表特殊的一个字符
转义字符表:
   \'  代表一个单引号
   \"  代表一个双引号
   \n  代表一个换行符
   \\  代表一个反斜杠
   \r  返回光标至行首
   \t  水平制表符
   \f  换页
   \v  垂直制表符
   \b  倒退(backspace)
   \0  字符串,字符值为0
   \0oo  oo为两位八进制表示的字符
   \xXX  XX为两位十六进制表示的字符
   \uXXXX Unicode 16的十六进制的字符
   \UXXXXXXXX Unicode 32 的十六进制表示的字符

ASCII 编码:
   # 查看 ASCII编码表
   $ man ascii  # 仅linux可用

常用的ASCII编码:
  字符    十进制    十六进制
  '0'     48        0x30
  'A'     65        0x41
  'a'     97        0x61



序列的概念
  字符串就是序列

求序列的长度的函数len
  len(x)  返回字符串中字符的个数

字符串练习:
   '1234abcd'  有几个字符 8
   '5\'4"'     有几个字符 4
   '\"A\x34'   有几个字符 3
   '\n\bc\t\r' 有几个字符

raw 字符串(原始字符串)
  格式:
    r"字符串内容"
    r'字符串内容'
    r"""字符串内容"""
    r'''字符串内容'''
  作用:
    让转义字符 '\' 无效
  示例:
    a = "C:\newfile\test.py"  
    print(a)

    b = r"C:\newfile\test.py"
    print(b)
    print(len(a))  # 16
    print(len(b))  # 18


字符串的运算:
运算符:
  +   +=  *  *=

+ 加号运算符用于拼接字符串
+= 用于拼接运算后改变原变量的绑定关系
  示例:
  x = "abcd" + "efg"
  print(x)  # abcdefg
  x += '123'
  print(x)  # abcdefg123

* 运算符生成重复的字符串
  x = "ABCD" * 3  # x = 'ABCDABCDABCD'
  y = 2 * "123"  # y = '123123'
  注: 字符串只能和整数相乘

*= 生成重复的字符串并改变原变量的绑定关系
  x = '123'
  x *= 2  # x = '123123'
  y = 3
  y *= "ABC"  # y = 'ABCABCABC'

练习:
  写一个程序,打印一个高度为4行的矩形方框
   要求,输入一个整数,此整数代表矩形的宽度.
  如:
    输入矩形宽度: 10
  打印如下:
    ##########
    #        #
    #        #
    ##########

  如:
    输入矩形宽度: 5
  打印如下:
    #####
    #   #
    #   #
    #####



字符串的比较运算
  运算符:
    < <= > >= == !=
  示例:
    'A' < 'B'  # True
    'AB' <= 'AC'  # True
    'ABC' > 'ACB'  # False
    'AD'  > 'ABC'  # True
    'AB'  < 'ABC'  # True
    'ABC'  == 'abc'  # False
    'ABCD' != 'DCBA'  # True


in / not in 运算符
  作用:
    in 用于序列,字典,集合中,用于判断某个值是否存在于容器中,如果存在返回True, 否则返回False
  说明:
    not in 返回结果与in 相反
  格式:
    对象 in 序列
  示例:
    x = 'welcome to tarena!'
    'to' in x  # True
    'e t' in x  # True
    'hello' in x  # False
    'hello' not in x  # True

写程序,输入一个长长的字符串,然后判断你的姓名是否存在于这个字符串中.
  如果存在,则打印: '您的名字出现了'
  否则提示: '没出现你的名字'













