# ------------------------------------------------------------
# 系统模块 sys
# ------------------------------------------------------------
# import sys
# print('current version is ', sys.version)
#
#
# import sys
# print('current version is ', sys.version_info[:3])
# print('current paltform is ', sys.platform)
# print('number of argv is ', len(sys.argv))
# print('copyright is ', sys.copyright)
# print('builtin_module_names is ', sys.builtin_module_names)
#
#
# def mysum():
#     pass
#     # 递归求和
# sys.setrecursionlimit(2000)
# mysum(1500)
# 补全
# ------------------------------------------------------------
# mymod.py
# 此示例示意自定义模块
# ------------------------------------------------------------
# def myfac():
#     print('正在计算%d的阶乘：' % n)
#
# def mysum():
#     print('正在计算1～%d的和：' % n)
#
# name1 = 'audi'
# name2 = 'Tasla'
#
#导入自定义模块
# import 语句导入
# import mymod

# mymod.myfac(5)
# mymod.mysum(1000)
# print(mymod.name1)
# print(mymod.name2)

# from mymod import as myfac, mysum, name2
# from mymod import *
# myfac(10)
# mysum(100)
# print(name2)
# dir()？？？？？？？？？？怎么看

# ------------------------------------------------------------

# ------------------------------------------------------------
# 将文件安装或复制到sys.path的路径中
#
# 在运行程序时，在sys.pat里添加自定义的路径
# import sys
# sys.path.append('目标模块文件夹')






# ------------------------------------------------------------
# 模块的属性
# ------------------------------------------------------------
# import mymod
# print(help(mymod))
# print(__file__)
# print(mymod.__file__)
# print(__name__)
# print(mymod.__name__)







# ------------------------------------------------------------
# __all__属性
# ------------------------------------------------------------
# __all__ = ['f1', 'var1']
# # 限定from mymod import *时只能导入'f1', 'var1'
# def f1():
#     pass
#
# def f2():
#     pass
#
# def f3():
#     pass
#
# var1 = 100
# var2 = 200
# ------------------------------------------------------------
# 模块的隐藏属性
# ------------------------------------------------------------
#
# def f1():
#     pass
#
# def f2():
#     pass
#
# def f3():
#     pass
#
# name1 = 'abc'
# _name2 = '123'
#
# from mymod import *
# dir()
# ------------------------------------------------------------
# 随机数
# ------------------------------------------------------------
# import random
# print(random.random())# 0~1
# print(random.uniform(5, 10))# a~b
# print(random.randrange(5, 10, 2))# 按range生成序列抽取
# print(random.choice([5, 10, 2, 6, 3])) #序列中抽取
# # print(random.shuffle([])  #序列中抽取
# print(random.sample(range(20), 2))

# Mysql_order 猜数字游戏
#     随机生成一个 0~100之间的一个整数，用变量x绑定
#     让用户输入一个数y,输出猜数字的结果:
#       1) 如果y大于x则提示: "您猜大了"
#       2) 如果y小于x则提示: "您猜小了"
#       3) 如果y等于生成的数x,则提供示用户"恭喜您猜对了 "并退出猜数字
#     循环重复上述步聚，直到猜对为止。
#     猜对了，显示用户猜数字的次数，然后退出程序


# def guss():
#     import random
#     # WAY1
#     # x = random.sample(range(101), 1)
#     # x = x[0]
#     # WAY2
#     x = int(random.uniform(0,101))
#     print(x)
#     i = 0
#     def check(x, i):
#         y = int(input("请输入一个整数"))
#         if x > y:
#             print("您猜小了")
#             i += 1
#             return check(x, i)
#         elif x < y:
#             print("您猜大了")
#             i += 1
#             return check(x, i)
#         else:
#             i += 1
#         return i
#     i = check(x, i)
#     print('游戏结束', i)
# guss()


# ------------------------------------------------------------
# 包的导入方式
# ------------------------------------------------------------
# import mypack.memu
# mupack.menu.show_menu()
# # 导入文件夹下文件中的包




# ------------------------------------------------------------

# ------------------------------------------------------------







# ------------------------------------------------------------

# ------------------------------------------------------------







# ------------------------------------------------------------

# ------------------------------------------------------------







# ------------------------------------------------------------

# ------------------------------------------------------------







# ------------------------------------------------------------

# ------------------------------------------------------------







# ------------------------------------------------------------

# ------------------------------------------------------------







# ------------------------------------------------------------

# ------------------------------------------------------------







# ------------------------------------------------------------

# ------------------------------------------------------------







# ------------------------------------------------------------

# ------------------------------------------------------------







# ------------------------------------------------------------

# ------------------------------------------------------------





